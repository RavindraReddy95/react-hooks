{"version":3,"sources":["Reducers/ReducerTwo.js","Reducers/DataFetchingOne.js","Reducers/DataFetchingTwo.js","App.js","reportWebVitals.js","index.js"],"names":["ReducerTwo","DataFetchingOne","initialState","loading","post","error","reducer","state","action","type","data","DataFetchingTwo","useReducer","dispatch","useEffect","axios","get","then","res","catch","err","title","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA+CeA,I,gBCfAC,IC7BTC,EAAe,CACnBC,SAAS,EACTC,KAAM,GACNC,MAAO,IAGHC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,gBACH,MAAO,CACLN,SAAS,EACTC,KAAMI,EAAOE,KACbL,MAAO,IAEX,IAAK,cACH,MAAO,CACLF,SAAS,EACTC,KAAM,GACNC,MAAO,sBAGX,IAAK,UACH,OAAOE,IAsBEI,MAlBf,WAA4B,IAAD,EACCC,qBAAWN,EAASJ,GADrB,mBAClBK,EADkB,KACXM,EADW,KAazB,OAXAC,qBAAU,WACRC,IACGC,IAAI,gDACJC,MAAK,SAACC,GACLL,EAAS,CAAEJ,KAAM,gBAAiBC,KAAMQ,EAAIR,UAE7CS,OAAM,SAACC,GACNP,EAAS,CAAEJ,KAAM,qBAEpB,IAGD,8BAAMF,EAAMJ,QAAU,yBAA2BI,EAAMH,KAAKiB,SCxBjDC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SAIE,cAAC,EAAD,OCFSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4fc5176e.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  firstCounter: 0,\r\n  secondCounter: 15,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"increment\":\r\n      return { ...state, firstCounter: state.firstCounter + action.value };\r\n    case \"decrement\":\r\n      return { ...state, firstCounter: state.firstCounter - action.value };\r\n    case \"reset\":\r\n      return initialState;\r\n    case \"increment2\":\r\n      return { ...state, secondCounter: state.secondCounter + action.value };\r\n    case \"decrement2\":\r\n      return { ...state, secondCounter: state.secondCounter - action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction ReducerTwo() {\r\n  const [count, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <div>\r\n      <div>Firstcount - {count.firstCounter}</div>\r\n      <div>Secondcount - {count.secondCounter}</div>\r\n      <button onClick={() => dispatch({ type: \"increment\", value: 1 })}>\r\n        Increment\r\n      </button>\r\n      <button onClick={() => dispatch({ type: \"decrement\", value: 1 })}>\r\n        Decrement\r\n      </button>\r\n      <button onClick={() => dispatch({ type: \"reset\" })}>Reset</button>\r\n      <button onClick={() => dispatch({ type: \"increment2\", value: 5 })}>\r\n        Increment 5\r\n      </button>\r\n      <button onClick={() => dispatch({ type: \"decrement2\", value: 5 })}>\r\n        Decrement 5\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReducerTwo;\r\n","import Axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction DataFetchingOne() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [post, setPost] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setPost(res.data);\r\n        setError(\"\");\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setPost({});\r\n        setError(\"Error Fetching Data\");\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? \"Loading...\" : post.title}\r\n      {error ? error : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataFetchingOne;\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  post: {},\r\n  error: \"\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        loading: false,\r\n        post: action.data,\r\n        error: \"\",\r\n      };\r\n    case \"FETCH_ERROR\":\r\n      return {\r\n        loading: false,\r\n        post: {},\r\n        error: \"ERROR LOADING DATA\",\r\n      };\r\n\r\n    case \"default\":\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction DataFetchingTwo() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n      .then((res) => {\r\n        dispatch({ type: \"FETCH_SUCCESS\", data: res.data });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: \"FETCH_ERROR\" });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>{state.loading ? \"LOADING PLEASE WAIT...\" : state.post.title}</div>\r\n  );\r\n}\r\n\r\nexport default DataFetchingTwo;\r\n","import \"./App.css\";\nimport React from \"react\";\n// import ComponentC from \"./UseContext/ComponentC\";\nimport ReducerOne from \"./Reducers/ReducerOne\";\nimport ReducerTwo from \"./Reducers/ReducerTwo\";\nimport DataFetchingOne from \"./Reducers/DataFetchingOne\";\nimport DataFetchingTwo from \"./Reducers/DataFetchingTwo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <ReducerOne /> */}\n      {/* <ReducerTwo /> */}\n      {/* <DataFetchingOne /> */}\n      <DataFetchingTwo />\n    </div>\n  );\n}\n\nexport default App;\n// export const UserContext = React.createContext();\n// export const ChannelContext = React.createContext();\n\n//  <UserContext.Provider value={\"Ravindra Reddy\"}>\n//    <ChannelContext.Provider value={\"React Developer\"}>\n//      <ComponentC />\n//    </ChannelContext.Provider>\n//  </UserContext.Provider>;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}